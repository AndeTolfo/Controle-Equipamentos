unit view.Cadastro.Funcionarios;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, frame.Buttons,
  Vcl.StdCtrls, Vcl.Buttons, Vcl.ComCtrls, DATAMODULE, Data.DB;

type
  TfrmCadFuncionario = class(TForm)
    pnContainer: TPanel;
    pnlTopo: TPanel;
    pnlRodape: TPanel;
    pnlCentro: TPanel;
    btnsalvar: TBitBtn;
    btnNovo: TBitBtn;
    btnExcluir: TBitBtn;
    btnSair: TBitBtn;
    Label1: TLabel;
    Label2: TLabel;
    edtCod: TEdit;
    btnPesquisaCompra: TSpeedButton;
    Label3: TLabel;
    edtNome: TEdit;
    Label9: TLabel;
    cbContrato: TComboBox;
    Label4: TLabel;
    cbSetor: TComboBox;
    dtCadastro: TDateTimePicker;
    Label7: TLabel;
    dsFuncionarios: TDataSource;
    procedure btnsalvarClick(Sender: TObject);
    procedure edtCodKeyPress(Sender: TObject; var Key: Char);
    procedure edtCodKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmCadFuncionario: TfrmCadFuncionario;

implementation

{$R *.dfm}

uses Funcoes;

procedure TfrmCadFuncionario.btnsalvarClick(Sender: TObject);
var
  data_cadastro: TDate;
  nome, setor, contrato : string;
begin
  // Verifica se a opção foi selecionada no cbTipoCompra
  if cbSetor.ItemIndex = -1 then
  begin
    ShowMessage('Selecione um setor.'); // Exibe mensagem de erro
    Exit; // Sai do procedimento sem executar o SQL
  end;

  if cbContrato.ItemIndex = -1 then
  begin
    ShowMessage('Selecione um status.'); // Exibe mensagem de erro
    Exit; // Sai do procedimento sem executar o SQL
  end;

  try

   case cbSetor.ItemIndex of
      0: setor := 'Comercial';
      1: setor := 'Desenvolvimento';
      2: setor := 'Financeiro';
      3: setor := 'Medicon';
      4: setor := 'Siscomp';
      5: setor := 'Administração';
   end;

   case cbContrato.ItemIndex of
      0: contrato := 'Ativo';
      1: contrato := 'Inativo';
   end;

   data_cadastro := dtCadastro.Date;
   nome := edtNome.Text;

   // Verifica se o campo edtCod contém um valor inteiro válido
    if Trim(edtCod.Text) = '' then
    begin
      // Inserção de um novo registro
    DM.WriteFuncionarios.SQL.Clear;
    DM.WriteFuncionarios.SQL.Add('INSERT INTO Funcionarios(nome_funcionario, setor,data_cadastro,status)');
    DM.WriteFuncionarios.SQL.Add('Values(:pNome,:pSetor,:pData,:pStatus)');
    end
    else
    begin
        DM.WriteFuncionarios.SQL.Clear;
        DM.WriteFuncionarios.SQL.Add('UPDATE Funcionarios SET nome_funcionario = :pNome, setor = :pSetor, data_cadastro = :pData, status = :pStatus');
        DM.WriteFuncionarios.SQL.Add('WHERE COD_Funcionario = :pCodigo');
        DM.WriteFuncionarios.ParamByName('pCodigo').AsInteger := StrToInt(edtCod.Text);
    end;

   DM.WriteFuncionarios.ParamByName('pData').AsDate := data_cadastro;
   DM.WriteFuncionarios.ParamByName('pNome').AsString := nome;
   DM.WriteFuncionarios.ParamByName('pSetor').AsString := setor;
   DM.WriteFuncionarios.ParamByName('pStatus').AsString := contrato;
   DM.WriteFuncionarios.ExecSQL;
   DM.WriteFuncionarios.Close;

 if Trim(edtCod.Text) = '' then
      ShowMessage('Cadastro concluído com sucesso!')
    else
      ShowMessage('Cadastro atualizado com sucesso!');
  except
    on E: Exception do
      ShowMessage('Erro ao salvar o registro: ' + E.Message);
  end;

  ClearControls([edtCod, edtNome, cbContrato, cbSetor]);
end;



procedure TfrmCadFuncionario.edtCodKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  codigo: Integer;
begin
  // Verifica se a tecla pressionada é a tecla "Enter" (código 13)
  if Key = 13 then
  begin

    // Verifica se o texto digitado no edtcod é um valor inteiro válido
    if TryStrToInt(edtcod.Text, codigo) then
    begin
      // Realiza a pesquisa no banco de dados com o código informado
      DM.ReadFuncionarios.SQL.Clear;
      DM.ReadFuncionarios.SQL.add ('SELECT * FROM Funcionarios WHERE COD_funcionario = :Codigo');
      DM.ReadFuncionarios.ParamByName('Codigo').AsInteger := codigo;
      DM.ReadFuncionarios.Open;

      // Verifica se foi encontrada alguma compra com o código informado
      if not DM.ReadFuncionarios.IsEmpty then
      begin
        // Preenche os outros campos do formulário com os dados da compra encontrada
        dtCadastro.Date := DM.ReadFuncionarios.FieldByName('DATA_Cadastro').AsDateTime;
        edtNome.Text := DM.ReadFuncionarios.FieldByName('NOME_FUNCIONARIO').AsString;
    // Define o valor do ComboBox cbSetor com base na coluna Setor do banco de dados
        if DM.ReadFuncionarios.FieldByName('setor').AsString = 'Comercial' then
            cbSetor.ItemIndex := 0
        else if DM.ReadFuncionarios.FieldByName('setor').AsString = 'Desenvolvimento' then
            cbSetor.ItemIndex := 1
        else if DM.ReadFuncionarios.FieldByName('setor').AsString = 'Financeiro' then
            cbSetor.ItemIndex := 2
        else if DM.ReadFuncionarios.FieldByName('setor').AsString = 'Medicon' then
            cbSetor.ItemIndex := 3
        else if DM.ReadFuncionarios.FieldByName('setor').AsString = 'Siscomp' then
            cbSetor.ItemIndex := 4
        else if DM.ReadFuncionarios.FieldByName('setor').AsString = 'Administração' then
            cbSetor.ItemIndex := 5;

          if DM.ReadFuncionarios.FieldByName('status').AsString = 'Ativo' then
            cbcontrato.ItemIndex := 0
        else if DM.ReadFuncionarios.FieldByName('status').AsString = 'Inativo' then
            cbcontrato.ItemIndex := 1
      end
      else
      begin
        // Caso não encontre uma compra com o código informado, limpa os campos
//            ClearControls([edtCod, edtNome, cbContrato, cbSetor]);
//        ShowMessage('Compra não encontrada!');
//        frmPesquisa := TfrmPesquisa.Create(Self);
//        try
//          frmPesquisa.tabela := 'Compras';
//          frmPesquisa.edtNome.Text := inttostr(codigo);
//          if frmPesquisa.ShowModal = mrOk then
//          begin
//
//          end;
//        finally
//          frmPesquisa.Free;
//        end;
      end;
    end
    else
    begin
      // Caso o texto digitado não seja um valor inteiro válido, limpa os campos e exibe uma mensagem de erro
      ClearControls([edtCod, edtNome,cbSetor, cbContrato]);
      ShowMessage('Digite um código de compra válido!');
    end;
  end;
    DM.ReadFuncionarios.Close;
end;

procedure TfrmCadFuncionario.edtCodKeyPress(Sender: TObject; var Key: Char);
begin
  // Verifica se a tecla pressionada é a tecla "Enter" (código 13)
  if Key = #13 then
  begin
    // Evita que o som padrão seja reproduzido
    Key := #0;
  end;
end;

end.
